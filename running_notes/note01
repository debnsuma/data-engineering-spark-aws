MAP REDUCE 
===========


2 phases - MAP REDUCE 

(K, V) => MAP => (K, V)
(K, V) => REDUCER => (K, V)

text file (500 GB)
==========

my name is suman hello 
suman lives in boston
aws is great hello world
cloud is great 

File Output which we want is this 
==================================

(my, 1)
(name, 1)
(suman, 2)
(cloud, 1)


3 machines 
==========
M1
===
my name is suman hello 
suman lives in boston

M2
===
aws is great hello world
cloud is great 
my name is suman hello 

M3
===
fcc is rocking 
i love big data 


MAPPER FUNCTION and REDUCER FUNCTION 
===================================

Record Reader 
-------------

M1              ====> MAPPER1 Function
===
(11111, my name is suman hello)                
(21111, suman lives in boston)

M2              ====> MAPPER2 Function 
===
(31111, aws is great hello world)
(42323, cloud is great)
(5, my name is suman hello) 

M3              ====> MAPPER3 Function 
===
(123, fcc is rocking)
(10, i love big data data data) 


Mapper output (m1)
=============
(my, 1)
(name, 1)
(is, 1)
(suman, 1)

Mapper output (m2)
=============
(hello, 1)
(suman, 1)
(live, 1)
(in, 1)
(i, 1)
(love, 1)
(big, 1)
(data, 1)
(data, 1)
(data, 1)


The output of all the mapper machine will be send to a reducer machine 
========================================================================

M4  (Shuffle and sorting) ===> MR framework 
=============
(data, {1, 1, 1})
(my, 1)
(name, 1)
(is, 1)
(hello, 1)
(suman, 1)
(live, 1)
(in, 1)
(suman, 1)
(world, {1, 1})


Final output of the reducer function/machine would be
===========================

(data, 3)
(my, 1)
(hello, 2)
(world, 2)

                                    (MR framework)                                              (MR framework)
Data in the for plain text ====> Record Reader ====> <K, V> ====> Mapper ====> <k, V> =====> Shuffle and Sort ====> Reducer =====> Final output 
                                                                  (code)                                             (code)
                                                            parallel processing 


